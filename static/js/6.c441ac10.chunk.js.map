{"version":3,"file":"static/js/6.c441ac10.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gCslS\",\"mainPhoto\":\"ProfileInfo_mainPhoto__C0THS\",\"contact\":\"ProfileInfo_contact__HsKT-\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status.trim())\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && deactivateEditMode()\r\n    }\r\n\r\n    return <>\r\n        {!editMode && <div>\r\n            <b>Status</b>: <span onDoubleClick={activateEditMode}>\r\n                    {props.status || '--------'}\r\n                </span>\r\n        </div>}\r\n        {editMode && <div>\r\n            <input value={status}\r\n                   onBlur={deactivateEditMode}\r\n                   autoFocus\r\n                   onChange={onStatusChange}\r\n                   onKeyDown={onPressEnter}/>\r\n        </div>}\r\n    </>\r\n}","import {UpdateProfileType} from '../../../../redux/profile-reducer';\r\nimport React from 'react';\r\nimport {createField, Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport classes from '../ProfileInfo.module.css';\r\nimport styles from '../../../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UpdateProfileType>> = ({handleSubmit, initialValues, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><b>Full name</b>: {createField('Full name', 'fullName', [], Input, 'input')}</div>\r\n        <div><b>Looking for a job</b>:\r\n            {createField('', 'lookingForAJob', [], Input, 'input', {type: 'checkbox'}, 'looking for a job')}\r\n        </div>\r\n        <div><b>My skills</b>:\r\n            {createField('My skills', 'lookingForAJobDescription', [], Textarea, 'textarea')}\r\n        </div>\r\n        <div><b>About me</b>:\r\n            {createField('About me', 'aboutMe', [], Textarea, 'textarea')}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {initialValues.contacts && Object.keys(initialValues.contacts).map((k) => <div\r\n            key={k} className={classes.contact}><b>{k}: {createField(k, 'contacts.' + k, [], Input, 'input')}</b>\r\n        </div>)}\r\n        </div>\r\n        {error && <div className={styles.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<UpdateProfileType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileType, UpdateProfileType} from '../../../redux/profile-reducer';\r\nimport userPhoto from '../../../assets/images/userPhoto.jpg'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatus/ProfileStatusWithHooks';\r\nimport {ProfileDataReduxForm} from './ProfileDataForm/ProfileDataForm';\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    saveMainPhoto: (photo: File) => void\r\n    saveProfile: (profile: UpdateProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         isOwner,\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateStatus,\r\n                                                         saveMainPhoto,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target.files && saveMainPhoto(e.target.files[0])\r\n    }\r\n    const onSubmit = (formData: UpdateProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos!.large || userPhoto} alt=\"user\" className={classes.mainPhoto}/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {editMode ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={profile} isOwner={isOwner} turnOnEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    turnOnEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, turnOnEditMode}) => {\r\n    return <div>\r\n        <div>Hi, my name is {profile.fullName} {isOwner &&\r\n            <button onClick={turnOnEditMode}>Edit profile</button>}</div>\r\n        <div><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        <div><b>My skills</b>: {profile.lookingForAJobDescription}</div>\r\n        <div>{profile.aboutMe}</div>\r\n        <div><b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map((k) => <Contact\r\n            key={k} contactTitle={k}\r\n            contactValue={profile.contacts && profile.contacts[k as keyof typeof profile.contacts]}/>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__d3D3L\",\"posts\":\"MyPosts_posts__53ep-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__5eqmj\"};","import classes from \"./Post.module.css\";\r\nimport React from \"react\";\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\nconst Post = (props:PostType) => {\r\n    return (\r\n        <div className={classes.item}><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTLpH2L9SxARizd9V_dTyF1xaNW_71Tj0QjKQ&usqp=CAU\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import classes from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message}\r\n                                                   likesCount={p.likesCount}/>)\r\n\r\n    const addNewPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst PostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name={'newPostText'} placeholder={'write a post'} component={Textarea}\r\n                   validate={[required, maxLength10]} FieldType={'textarea'}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'profileAddPostReduxForm'\r\n})(PostsForm)","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {addPostCreator, PostType} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => dispatch(addPostCreator(newPost)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType, UpdateProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    saveMainPhoto: (photo: File) => void\r\n    saveProfile: (profile: UpdateProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({isOwner, profile, status, updateStatus, saveMainPhoto, saveProfile}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}\r\n                         saveMainPhoto={saveMainPhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusThunkCreator,\r\n    saveMainPhotoTC,\r\n    saveProfileTC,\r\n    UpdateProfileType,\r\n    updateUserStatusThunkCreator,\r\n} from '../../redux/profile-reducer';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId ?? this.props.authorizedUserId\r\n        if (!userId) {\r\n            this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfileTC(Number(userId))\r\n        this.props.getUserStatusThunkCreator(Number(userId))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile isOwner={!this.props.match.params.userId}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateUserStatusThunkCreator}\r\n                        saveMainPhoto={this.props.saveMainPhotoTC}\r\n                        saveProfile={this.props.saveProfileTC}/>\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getUserStatusThunkCreator: (userId: number) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n    saveMainPhotoTC: (photo: File) => void\r\n    saveProfileTC: (profile: UpdateProfileType) => Promise<any>\r\n}\r\ntype PropsFromConnectType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsFromConnectType\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfileTC,\r\n            getUserStatusThunkCreator,\r\n            updateUserStatusThunkCreator,\r\n            saveMainPhotoTC,\r\n            saveProfileTC\r\n        }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateStatus","trim","onDoubleClick","value","onBlur","autoFocus","onChange","e","currentTarget","onKeyDown","key","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","createField","Input","type","Textarea","contacts","Object","keys","map","k","className","classes","styles","isOwner","profile","saveMainPhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","target","files","formData","then","ProfileData","turnOnEditMode","fullName","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","message","likesCount","maxLength10","maxLengthCreator","React","postsElements","posts","p","id","AddPostReduxForm","addPost","newPostText","Field","name","placeholder","component","validate","required","FieldType","connect","state","profilePage","dispatch","newPost","addPostCreator","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","Number","getUserStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","updateUserStatusThunkCreator","saveMainPhotoTC","saveProfileTC","compose","auth","withRouter","withAuthRedirect","mapStateToProps","isAuth","Component","restProps","to"],"sourceRoot":""}