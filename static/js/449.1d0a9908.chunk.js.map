{"version":3,"file":"static/js/449.1d0a9908.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,mBCKlMA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAApC,SAAqDJ,EAAMO,UCH1DC,EAAU,SAACR,GACpB,OAAO,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMS,W,6BCC7CC,GAAcC,E,QAAAA,GAAiB,IAcrC,GAAeC,EAAAA,EAAAA,GAAwB,CACnCC,KAAM,6BADV,EAZkE,SAACb,GAC/D,OAAO,kBAAMc,SAAUd,EAAMe,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBV,KAAM,iBAAkBW,UAAWC,EAAAA,GACtEC,SAAU,CAACV,GAAcW,UAAW,gBAE/C,0BACI,6CCYZ,EAtBgB,SAACrB,GAEb,IAAIsB,EAAkBtB,EAAMuB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC3B,EAAD,CAAuBQ,KAAMmB,EAAEnB,KAAML,GAAIwB,EAAExB,IAA1BwB,EAAExB,OACxEyB,EAAmB3B,EAAMuB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACrB,EAAD,CAAoBC,QAASoB,EAAEpB,SAAjBoB,EAAE3B,OAM3E,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,WACI,yBAAMuB,KACN,SAAC,EAAD,CAAgBb,SAXN,SAACgB,GACnB9B,EAAM+B,WAAWD,EAASE,0B,6BCelC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAboB,SAACC,GACrB,MAAO,CACHZ,YAAaY,EAAMZ,gBAIA,SAACa,GACxB,MAAO,CACHL,WAAY,SAACM,GAAD,OAAuBD,GAASE,EAAAA,EAAAA,IAAaD,SAM7DE,EAAAA,EAFJ,CAGEC,I,gICxBIC,EAAkB,SAACN,GACrB,MAAO,CACHO,OAAQP,EAAMQ,KAAKD,SAIpB,SAASH,EAAoBK,GAQhC,OAAOV,EAAAA,EAAAA,IAAQO,EAARP,EANmB,SAAClC,GACvB,IAAO0C,EAAwB1C,EAAxB0C,OAAWG,GAAlB,OAA+B7C,EAA/B,GACA,OAAK0C,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__lldvv\",\"dialogItems\":\"Dialogs_dialogItems__XRdIG\",\"dialog\":\"Dialogs_dialog__07uh7\",\"active\":\"Dialogs_active__-zm9t\",\"messages\":\"Dialogs_messages__lVFxU\",\"message\":\"Dialogs_message__aZWm+\"};","import classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={path} activeClassName={classes.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import classes from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype TextPropsType = {\r\n    message:string\r\n}\r\n\r\nexport const Message = (props: TextPropsType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator} from '../../../utils/validators/validators';\r\n\r\nexport type FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Enter your message'} name={'newMessageText'} component={Textarea}\r\n                   validate={[maxLength50]} FieldType={'textarea'}/>\r\n        </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default reduxForm<FormDataType>({\r\n    form: 'dialogAddMessageReduxForm'\r\n})(AddMessageForm)","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport AddMessageForm, {FormDataType} from './AddMessageForm/AddMessageForm';\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        props.addMessage(formData.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {addMessageTC, DialogsPageStateType} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {AnyAction, compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsPageStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessage:string) => void\r\n}\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<RootState, unknown, AnyAction>): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessage:string) => dispatch(addMessageTC(newMessage))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["DialogItem","props","path","id","className","classes","to","activeClassName","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","FieldType","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","formData","addMessage","newMessageText","compose","connect","state","dispatch","newMessage","addMessageTC","withAuthRedirect","Dialogs","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}