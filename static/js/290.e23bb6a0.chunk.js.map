{"version":3,"file":"static/js/290.e23bb6a0.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.scss?93f2","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/PostsForm/PostsForm.module.scss?3156","components/Profile/MyPosts/PostsForm/PostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__a2cho\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Ss1YJ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__lSNJt\",\"avatarBlock\":\"ProfileInfo_avatarBlock__MiB-J\",\"avatar\":\"ProfileInfo_avatar__NjXDb\",\"circle\":\"ProfileInfo_circle__QEhyx\",\"personalInfo\":\"ProfileInfo_personalInfo__XpgUu\",\"contacts\":\"ProfileInfo_contacts__h3YlF\",\"contact\":\"ProfileInfo_contact__+1sST\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => props.isOwner && setEditMode(true)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status.trim())\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && deactivateEditMode()\r\n    }\r\n\r\n    return <>\r\n        {!editMode && <div>\r\n            <span onDoubleClick={activateEditMode} style={{wordWrap: 'break-word'}}>\r\n                    <i>{props.status || '--------'}</i>\r\n                </span>\r\n        </div>}\r\n        {editMode && <div>\r\n            <input value={status}\r\n                   onBlur={deactivateEditMode}\r\n                   autoFocus\r\n                   onChange={onStatusChange}\r\n                   onKeyDown={onPressEnter}/>\r\n        </div>}\r\n    </>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileForm\":\"ProfileDataForm_profileForm__BEh5I\"};","import {UpdateProfileType} from '../../../../redux/profile-reducer';\r\nimport React from 'react';\r\nimport {createField, Input} from '../../../common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport styles from '../../../common/FormsControls/FormsControls.module.css'\r\nimport {Button} from '../../../common/Button/Button';\r\nimport classes from './ProfileDataForm.module.scss'\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UpdateProfileType>> = ({handleSubmit, initialValues, error}) => {\r\n    return <form onSubmit={handleSubmit} className={classes.profileForm}>\r\n        <div>\r\n            <div><b>Full name: </b> {createField('Full name', 'fullName', [], Input, 'input')}</div>\r\n            <div><b>Looking for a job: </b>\r\n                {createField('', 'lookingForAJob', [], Input, 'input', {type: 'checkbox'})}\r\n            </div>\r\n            <div><b>My skills: </b>\r\n                {createField('My skills', 'lookingForAJobDescription', [], Input, 'input')}\r\n            </div>\r\n            <div><b>About me: </b>\r\n                {createField('About me', 'aboutMe', [], Input, 'input')}\r\n            </div>\r\n            <Button title={'Save'}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {initialValues.contacts && Object.keys(initialValues.contacts).map((k) => <div\r\n            key={k} className={classes.contact}>{createField(k, 'contacts.' + k, [], Input, 'input')}<b> {k}</b>\r\n        </div>)}\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<UpdateProfileType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport classes from './ProfileInfo.module.scss';\r\nimport {ProfileType, UpdateProfileType} from '../../../redux/profile-reducer';\r\nimport userPhoto from '../../../assets/images/userPhoto.jpg'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatus/ProfileStatusWithHooks';\r\nimport {ProfileDataReduxForm} from './ProfileDataForm/ProfileDataForm';\r\nimport photo from '../../../assets/images/Cover_Sri.jpg'\r\nimport {MdPhotoCamera} from 'react-icons/md';\r\nimport {Button} from '../../common/Button/Button';\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    saveMainPhoto: (photo: File) => void\r\n    saveProfile: (profile: UpdateProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         isOwner,\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateStatus,\r\n                                                         saveMainPhoto,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click();\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Preloader inside/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target.files && saveMainPhoto(e.target.files[0])\r\n    }\r\n    const onSubmit = (formData: UpdateProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            <img src={`${photo}`} alt=\"field\" className={classes.mainPhoto}/>\r\n            <div className={classes.descriptionBlock}>\r\n                <div className={classes.avatarBlock}>\r\n                    <img src={profile.photos!.large || userPhoto} alt=\"user\"\r\n                         className={classes.avatar}/>\r\n                    {isOwner && <div className={classes.circle}><MdPhotoCamera onClick={selectFileHandler}/></div>}\r\n                    {isOwner &&\r\n                        <input type=\"file\" ref={inputRef} onChange={onMainPhotoSelected} style={{display: 'none'}}/>}\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} status={status} updateStatus={updateStatus}\r\n                                   turnOnEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    turnOnEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, status, updateStatus, turnOnEditMode}) => {\r\n    return <>\r\n        <div className={classes.personalInfo}>\r\n            <h3>{profile.fullName}</h3>\r\n            <ProfileStatusWithHooks status={status} isOwner={isOwner} updateStatus={updateStatus}/>\r\n            <div><b>Available for hire:</b> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div><b>My skills:</b> {profile.lookingForAJobDescription}</div>\r\n            <div><b>About me:</b> {profile.aboutMe}</div>\r\n            {isOwner && <Button title={'Edit profile'} callback={turnOnEditMode}/>}\r\n        </div>\r\n        {profile.contacts && Object.values(profile.contacts).some(value => value !== null)\r\n            && <div className={classes.contacts}>\r\n                <h3>Follow me</h3> {profile.contacts && Object.keys(profile.contacts).map((k) => {\r\n                if (profile.contacts\r\n                    && profile.contacts[k as keyof typeof profile.contacts] !== null\r\n                    && profile.contacts[k as keyof typeof profile.contacts].trim() !== '') {\r\n                    return <Contact\r\n                        key={k}\r\n                        contactTitle={k}\r\n                        contactValue={profile.contacts[k as keyof typeof profile.contacts]}/>\r\n                }\r\n                return null\r\n            })}\r\n            </div>}\r\n    </>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.contact}><b>{contactTitle}:</b> <a href={contactValue} target={'_blank'} rel={'noreferrer'}>{contactValue}</a></div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__kSB2G\",\"postBg\":\"MyPosts_postBg__DiD3Q\",\"newPost\":\"MyPosts_newPost__Z9BTp\",\"posts\":\"MyPosts_posts__g8lvX\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__U+fYG\",\"user\":\"Post_user__k1lel\",\"message\":\"Post_message__o+44O\",\"bottomBlock\":\"Post_bottomBlock__AjfeS\",\"like\":\"Post_like__WW21-\",\"basket\":\"Post_basket__LujN6\"};","import classes from './Post.module.scss';\r\nimport React from 'react';\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\nimport userPhoto from '../../../../assets/images/userPhoto.jpg'\r\nimport {AiFillDelete, AiFillHeart} from 'react-icons/ai';\r\n\r\ntype PostPropsType = PostType & {\r\n    avatar: string | undefined\r\n    name: string | undefined\r\n    deletePost: (postId: string) => void\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={classes.post}>\r\n\r\n            <div className={classes.user}>\r\n                <img alt=\"user\"\r\n                     src={props.avatar || userPhoto}\r\n                     className={classes.avatar}/>\r\n                <h3>{props.name || 'Marty Wilson'}</h3>\r\n            </div>\r\n            <div className={classes.message}>{props.message}</div>\r\n            <div className={classes.bottomBlock}>\r\n                <AiFillHeart className={classes.like}/>\r\n                <p>{props.likesCount}</p>\r\n                <AiFillDelete className={classes.basket} onClick={() => props.deletePost(props.id)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PostsForm_form__9dBIR\",\"btnWrapper\":\"PostsForm_btnWrapper__xYhZO\"};","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator} from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {Button} from '../../../common/Button/Button';\r\nimport classes from './PostsForm.module.scss';\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst PostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit} className={classes.form}>\r\n        <div>\r\n            <Field name={'newPostText'} placeholder={'write a post'} component={Textarea}\r\n                   validate={[maxLength100]} FieldType={'textarea'}/>\r\n        </div>\r\n        <div className={classes.btnWrapper}>\r\n            <Button title={'Add post'}/>\r\n        </div>\r\n    </form>\r\n}\r\nexport default reduxForm<FormDataType>({\r\n    form: 'profileAddPostReduxForm'\r\n})(PostsForm)","import classes from './MyPosts.module.scss';\r\nimport React from 'react';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport PostsForm, {FormDataType} from './PostsForm/PostsForm';\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id}\r\n                                                   id={p.id}\r\n                                                   message={p.message}\r\n                                                   likesCount={p.likesCount}\r\n                                                   name={props.name}\r\n                                                   avatar={props.avatar}\r\n                                                   deletePost={props.deletePost}/>)\r\n\r\n    const addNewPost = (formData: FormDataType) => {\r\n        if (formData.newPostText.trim() === '') return\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div className={classes.postBg}><h3>What's new?</h3>\r\n                <div className={classes.newPost}>\r\n                    <PostsForm onSubmit={addNewPost}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts","import MyPosts from './MyPosts';\r\nimport {addPostTC, deletePostAC, PostType} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\nimport {AnyAction} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    avatar: string | undefined\r\n    name: string | undefined\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPost: string) => void\r\n    deletePost: (postId: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        avatar: state.profilePage.profile?.photos?.small,\r\n        name: state.profilePage.profile?.fullName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<RootState, unknown, AnyAction>): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => dispatch(addPostTC(newPost)),\r\n        deletePost: (postId: string) => dispatch(deletePostAC(postId))\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType, UpdateProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    saveMainPhoto: (photo: File) => void\r\n    saveProfile: (profile: UpdateProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({isOwner, profile, status, updateStatus, saveMainPhoto, saveProfile}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}\r\n                         saveMainPhoto={saveMainPhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusThunkCreator,\r\n    saveMainPhotoTC,\r\n    saveProfileTC,\r\n    UpdateProfileType,\r\n    updateUserStatusThunkCreator,\r\n} from '../../redux/profile-reducer';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId ?? this.props.authorizedUserId\r\n        if (!userId) {\r\n            this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfileTC(Number(userId))\r\n        this.props.getUserStatusThunkCreator(Number(userId))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile isOwner={!this.props.match.params.userId}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateUserStatusThunkCreator}\r\n                        saveMainPhoto={this.props.saveMainPhotoTC}\r\n                        saveProfile={this.props.saveProfileTC}/>\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getUserStatusThunkCreator: (userId: number) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n    saveMainPhotoTC: (photo: File) => void\r\n    saveProfileTC: (profile: UpdateProfileType) => Promise<any>\r\n}\r\ntype PropsFromConnectType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsFromConnectType\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfileTC,\r\n            getUserStatusThunkCreator,\r\n            updateUserStatusThunkCreator,\r\n            saveMainPhotoTC,\r\n            saveProfileTC\r\n        }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateStatus","trim","onDoubleClick","isOwner","style","wordWrap","value","onBlur","autoFocus","onChange","e","currentTarget","onKeyDown","key","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","className","classes","createField","Input","type","Button","title","contacts","Object","keys","map","k","styles","profile","saveMainPhoto","saveProfile","inputRef","useRef","Preloader","inside","src","photo","alt","photos","large","userPhoto","onClick","current","click","ref","target","files","display","formData","then","ProfileData","turnOnEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","callback","values","some","Contact","contactTitle","contactValue","href","rel","avatar","name","message","likesCount","deletePost","id","maxLength100","maxLengthCreator","Field","placeholder","component","Textarea","validate","FieldType","React","postsElements","posts","p","newPostText","addPost","connect","state","profilePage","small","dispatch","newPost","addPostTC","postId","deletePostAC","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","Number","getUserStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","updateUserStatusThunkCreator","saveMainPhotoTC","saveProfileTC","compose","auth","withRouter","withAuthRedirect","mapStateToProps","isAuth","Component","restProps","to"],"sourceRoot":""}